package no.magott.spring.batch.postnr;

import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.junit.Assert.assertThat;

import java.sql.Types;
import java.util.HashMap;
import java.util.Map;

import javax.sql.DataSource;

import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.jdbc.object.SqlUpdate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
@ContextConfiguration(locations = {"classpath:springbatch-common.xml" })
@RunWith(SpringJUnit4ClassRunner.class)
public class AutogeneratedTest {

	
	@Autowired
	private DataSource dataSource;
	
	@Test
	@Ignore
	public void testSqlUpdateAutogenerated(){
		SqlUpdate update = new SqlUpdate(dataSource, "INSERT INTO postnummer(postnummer, poststed) VALUES(?,?)");
		GeneratedKeyHolder keyHolder = new GeneratedKeyHolder();
		update.declareParameter(new SqlParameter(Types.VARCHAR));
		update.declareParameter(new SqlParameter(Types.VARCHAR));
		update.setReturnGeneratedKeys(true);
		update.update(new Object[]{"1358", "Jar"}, keyHolder);
		assertThat(keyHolder.getKey(), not(nullValue()));
	}
	
	@Test
	public void testSimpleInsertAutogenerated(){
		SimpleJdbcInsert insert = new SimpleJdbcInsert(dataSource);
		insert.withTableName("POSTNUMMER");
		insert.usingColumns("postnummer","poststed");
		insert.setGeneratedKeyName("id");
		Map<String, Object> args= new HashMap<String, Object>();
		args.put("postnummer", "1358");
		args.put("poststed", "jar");
		Number key = insert.executeAndReturnKey(args);
		assertThat(key, not(nullValue()));
		System.out.println(key);
	}
	
}
